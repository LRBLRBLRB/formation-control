// Generated by gencpp from file aruco_detection/aruco_info.msg
// DO NOT EDIT!


#ifndef ARUCO_DETECTION_MESSAGE_ARUCO_INFO_H
#define ARUCO_DETECTION_MESSAGE_ARUCO_INFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace aruco_detection
{
template <class ContainerAllocator>
struct aruco_info_
{
  typedef aruco_info_<ContainerAllocator> Type;

  aruco_info_()
    : header()
    , detected(false)
    , board_rvec()
    , board_tvec()
    , robot_rvec()
    , robot_tvec()
    , board_marker_corners()
    , board_marker_ids()
    , robot_marker_corners()
    , robot_marker_id(0)  {
      board_rvec.assign(0.0);

      board_tvec.assign(0.0);

      robot_rvec.assign(0.0);

      robot_tvec.assign(0.0);
  }
  aruco_info_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detected(false)
    , board_rvec()
    , board_tvec()
    , robot_rvec()
    , robot_tvec()
    , board_marker_corners(_alloc)
    , board_marker_ids(_alloc)
    , robot_marker_corners()
    , robot_marker_id(0)  {
  (void)_alloc;
      board_rvec.assign(0.0);

      board_tvec.assign(0.0);

      robot_rvec.assign(0.0);

      robot_tvec.assign(0.0);

      robot_marker_corners.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef boost::array<double, 3>  _board_rvec_type;
  _board_rvec_type board_rvec;

   typedef boost::array<double, 3>  _board_tvec_type;
  _board_tvec_type board_tvec;

   typedef boost::array<double, 3>  _robot_rvec_type;
  _robot_rvec_type robot_rvec;

   typedef boost::array<double, 3>  _robot_tvec_type;
  _robot_tvec_type robot_tvec;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _board_marker_corners_type;
  _board_marker_corners_type board_marker_corners;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _board_marker_ids_type;
  _board_marker_ids_type board_marker_ids;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 4>  _robot_marker_corners_type;
  _robot_marker_corners_type robot_marker_corners;

   typedef int32_t _robot_marker_id_type;
  _robot_marker_id_type robot_marker_id;





  typedef boost::shared_ptr< ::aruco_detection::aruco_info_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::aruco_detection::aruco_info_<ContainerAllocator> const> ConstPtr;

}; // struct aruco_info_

typedef ::aruco_detection::aruco_info_<std::allocator<void> > aruco_info;

typedef boost::shared_ptr< ::aruco_detection::aruco_info > aruco_infoPtr;
typedef boost::shared_ptr< ::aruco_detection::aruco_info const> aruco_infoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::aruco_detection::aruco_info_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::aruco_detection::aruco_info_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace aruco_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'aruco_detection': ['/home/aemc4/catkin_ws_multirobot/src/aruco_detection/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::aruco_detection::aruco_info_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::aruco_detection::aruco_info_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_detection::aruco_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::aruco_detection::aruco_info_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_detection::aruco_info_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::aruco_detection::aruco_info_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::aruco_detection::aruco_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50078c3e5ce8427d6ec48492011d9975";
  }

  static const char* value(const ::aruco_detection::aruco_info_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50078c3e5ce8427dULL;
  static const uint64_t static_value2 = 0x6ec48492011d9975ULL;
};

template<class ContainerAllocator>
struct DataType< ::aruco_detection::aruco_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "aruco_detection/aruco_info";
  }

  static const char* value(const ::aruco_detection::aruco_info_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::aruco_detection::aruco_info_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n\
\n\
bool detected\n\
float64[3] board_rvec\n\
float64[3] board_tvec\n\
float64[3] robot_rvec\n\
float64[3] robot_tvec\n\
\n\
geometry_msgs/Point[] board_marker_corners\n\
int32[] board_marker_ids\n\
\n\
geometry_msgs/Point[4] robot_marker_corners\n\
int32 robot_marker_id\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::aruco_detection::aruco_info_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::aruco_detection::aruco_info_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detected);
      stream.next(m.board_rvec);
      stream.next(m.board_tvec);
      stream.next(m.robot_rvec);
      stream.next(m.robot_tvec);
      stream.next(m.board_marker_corners);
      stream.next(m.board_marker_ids);
      stream.next(m.robot_marker_corners);
      stream.next(m.robot_marker_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct aruco_info_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::aruco_detection::aruco_info_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::aruco_detection::aruco_info_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "board_rvec[]" << std::endl;
    for (size_t i = 0; i < v.board_rvec.size(); ++i)
    {
      s << indent << "  board_rvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.board_rvec[i]);
    }
    s << indent << "board_tvec[]" << std::endl;
    for (size_t i = 0; i < v.board_tvec.size(); ++i)
    {
      s << indent << "  board_tvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.board_tvec[i]);
    }
    s << indent << "robot_rvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_rvec.size(); ++i)
    {
      s << indent << "  robot_rvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_rvec[i]);
    }
    s << indent << "robot_tvec[]" << std::endl;
    for (size_t i = 0; i < v.robot_tvec.size(); ++i)
    {
      s << indent << "  robot_tvec[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.robot_tvec[i]);
    }
    s << indent << "board_marker_corners[]" << std::endl;
    for (size_t i = 0; i < v.board_marker_corners.size(); ++i)
    {
      s << indent << "  board_marker_corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.board_marker_corners[i]);
    }
    s << indent << "board_marker_ids[]" << std::endl;
    for (size_t i = 0; i < v.board_marker_ids.size(); ++i)
    {
      s << indent << "  board_marker_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.board_marker_ids[i]);
    }
    s << indent << "robot_marker_corners[]" << std::endl;
    for (size_t i = 0; i < v.robot_marker_corners.size(); ++i)
    {
      s << indent << "  robot_marker_corners[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.robot_marker_corners[i]);
    }
    s << indent << "robot_marker_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_marker_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARUCO_DETECTION_MESSAGE_ARUCO_INFO_H
